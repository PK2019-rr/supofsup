
import os
import requests
import re

SERPAPI_KEY = os.getenv("SERPAPI_KEY")
YANDEX_USER = os.getenv("YANDEX_USER")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_URL = "https://yandex.ru/search/xml"

MAX_TOKENS = 512

def get_search_summary(query):
    summary = search_google(query)
    if "–û—à–∏–±–∫–∞" in summary or "–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" in summary.lower():
        summary = search_yandex(query)

    return trim_tokens(summary)

def search_google(query):
    if not SERPAPI_KEY:
        return "SerpApi API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω."

    url = "https://serpapi.com/search"
    params = {
        "q": query,
        "engine": "google",
        "api_key": SERPAPI_KEY,
        "hl": "ru",
        "num": 5
    }

    try:
        response = requests.get(url, params=params)
        if response.status_code != 200:
            return f"–û—à–∏–±–∫–∞ SerpApi: {response.status_code}"

        data = response.json()
        snippets = []

        for res in data.get("organic_results", []):
            title = res.get("title", "").strip()
            snippet = res.get("snippet", "").strip()
            link = res.get("link", "").strip()
            if snippet:
                snippets.append(f"üîπ {title}\n{snippet}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {link}")

        return "\n\n".join(snippets) if snippets else "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ Google."

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ SerpApi: {str(e)}"

def search_yandex(query):
    if not YANDEX_USER or not YANDEX_API_KEY:
        return "YANDEX API –∫–ª—é—á –∏–ª–∏ user –Ω–µ —É–∫–∞–∑–∞–Ω."

    params = {
        "user": YANDEX_USER,
        "key": YANDEX_API_KEY,
        "query": query,
        "l10n": "ru",
        "groupby": "attr=d.mode.flat.groups-on-page=5.docs-in-group=1"
    }

    try:
        response = requests.get(YANDEX_URL, params=params)
        if response.status_code != 200:
            return f"–û—à–∏–±–∫–∞ Yandex XML API: {response.status_code}"

        text = response.text
        snippets = re.findall(r"<passage>(.*?)</passage>", text, re.DOTALL)
        cleaned = [re.sub("<.*?>", "", s).strip() for s in snippets if s.strip()]
        if cleaned:
            return "\n\n".join([f"üî∏ {s}" for s in cleaned])
        else:
            return "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –Ø–Ω–¥–µ–∫—Å–µ."

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ø–Ω–¥–µ–∫—Å API: {str(e)}"

def trim_tokens(text, max_tokens=MAX_TOKENS):
    words = text.split()
    if len(words) <= max_tokens:
        return text
    return " ".join(words[:max_tokens]) + "..."
